<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SB on Even - A super concise theme for Hugo</title>
    <link>https://it-boyer.github.io/categories/sb/</link>
    <description>Recent content in SB on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Jun 2017 17:33:59 +0000</lastBuildDate>
    
	<atom:link href="https://it-boyer.github.io/categories/sb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Xcode8中SB适配横竖屏按钮VaryforTraits</title>
      <link>https://it-boyer.github.io/post/xcode/xcode8%E4%B8%ADsb%E9%80%82%E9%85%8D%E6%A8%AA%E7%AB%96%E5%B1%8F%E6%8C%89%E9%92%AEvaryfortraits/</link>
      <pubDate>Tue, 13 Jun 2017 17:33:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/xcode/xcode8%E4%B8%ADsb%E9%80%82%E9%85%8D%E6%A8%AA%E7%AB%96%E5%B1%8F%E6%8C%89%E9%92%AEvaryfortraits/</guid>
      <description>升级xcode8之后，打开storyboard发现xcode7适配界面的size class被Trait Variations所取代: Trait Vari</description>
    </item>
    
    <item>
      <title>代码实现AutoLayout相关特性</title>
      <link>https://it-boyer.github.io/post/ios/ui/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0autolayout%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7/</link>
      <pubDate>Tue, 02 Sep 2014 15:53:11 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0autolayout%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;h2 id=&#34;按比例缩放&#34;&gt;按比例缩放&lt;/h2&gt;
&lt;p&gt;按比例缩放，这是在Interface Builder中无法设置的内容。&lt;br&gt;
而在代码中，有如下两种实现方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;NSLayoutConstraint&lt;/code&gt;类型的初始化函数中的&lt;code&gt;multiplier&lt;/code&gt;参数就可以非常简单的设置按比例缩放。&lt;/li&gt;
&lt;li&gt;同时也可以设置不同&lt;code&gt;NSLayoutAttribute&lt;/code&gt;参数来达到意想不到的效果，比如“A的Width等于B的Height的2倍”这样的效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在就拿一个简单的&lt;strong&gt;&lt;code&gt;UIButton&lt;/code&gt;&lt;/strong&gt;做示例，在ViewController中创建一个UIButton字段：&lt;br&gt;
{%codeblock lang:objc%}
UIButton *btn;&lt;br&gt;
{%endcodeblock%}&lt;/p&gt;
&lt;h4 id=&#34;需求-1&#34;&gt;需求 1：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;要求&lt;strong&gt;&lt;code&gt;UIButton&lt;/code&gt;&lt;/strong&gt;水平居中，始终距离父View底部&lt;strong&gt;20&lt;/strong&gt;单位，其高度是父View高度的三分之一。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;KVO&lt;/strong&gt;来监控&lt;strong&gt;&lt;code&gt;UIButton&lt;/code&gt;&lt;/strong&gt;的大小并实时输出到屏幕上。&lt;br&gt;
{%codeblock lang:objc%}&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(void)viewDidLoad
{
[super viewDidLoad];&lt;/p&gt;
&lt;p&gt;//创建UIButton，不需要设置frame
btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
[btn setTitle:@&amp;ldquo;mgen&amp;rdquo; forState:UIControlStateNormal];
btn.backgroundColor = [UIColor greenColor];
[self.view addSubview:btn];&lt;/p&gt;
&lt;p&gt;//禁止自动转换AutoresizingMask
btn.translatesAutoresizingMaskIntoConstraints = NO;&lt;/p&gt;
&lt;p&gt;//居中
[self.view addConstraint:[NSLayoutConstraint
constraintWithItem:btn
attribute:NSLayoutAttributeCenterX
relatedBy:NSLayoutRelationEqual
toItem:self.view
attribute:NSLayoutAttributeCenterX
multiplier:1
constant:0]];&lt;/p&gt;
&lt;p&gt;//距离底部20单位
//注意NSLayoutConstraint创建的constant是加在toItem参数的，所以需要-20。
[self.view addConstraint:[NSLayoutConstraint
constraintWithItem:btn
attribute:NSLayoutAttributeBottom
relatedBy:NSLayoutRelationEqual
toItem:self.view
attribute:NSLayoutAttributeBottom
multiplier:1
constant:-20]];&lt;/p&gt;
&lt;p&gt;//定义高度是父View的三分之一
[self.view addConstraint:[NSLayoutConstraint
constraintWithItem:btn
attribute:NSLayoutAttributeHeight
relatedBy:NSLayoutRelationEqual
toItem:self.view
attribute:NSLayoutAttributeHeight
multiplier:0.3
constant:0]];&lt;/p&gt;
&lt;p&gt;//注册KVO方法
[btn addObserver:self forKeyPath:@&amp;ldquo;bounds&amp;rdquo; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionInitial context:nil]; &lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Storyboard之Segue</title>
      <link>https://it-boyer.github.io/post/ios/ui/storyboard%E4%B9%8Bsegue/</link>
      <pubDate>Tue, 22 Jul 2014 10:59:49 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/storyboard%E4%B9%8Bsegue/</guid>
      <description>&lt;h5 id=&#34;segue原理&#34;&gt;Segue原理:&lt;/h5&gt;
&lt;p&gt;在iOS开发中，segue用来实现storyboard中源视图控制器和目标视图控制器连接，当segue被触发时，系统将完成下列操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例化目标视图控制器&lt;/li&gt;
&lt;li&gt;实例化一个新segue对象，该对象持有所有的信息&lt;/li&gt;
&lt;li&gt;调用源视图控制器的prepareForSegue:sender:方法，&lt;/li&gt;
&lt;li&gt;调用segue的 perform 方法将目标控制器带到屏幕上。&lt;br&gt;
这个动作行为依赖segue的类型如modal,push,custom,modal segue告诉源视图控制器present目标视图控制器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在源视图控制器的prepareForSegue:sender:的方法中，执行对目标视图控制器所有必要的属性配置，包括委托设置（如目标视图控制器有协议）。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>