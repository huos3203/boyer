<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on 七习--高效能人士</title>
    <link>https://it-boyer.github.io/categories/ios/</link>
    <description>Recent content in iOS on 七习--高效能人士</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Jul 2019 12:12:32 +0800</lastBuildDate><atom:link href="https://it-boyer.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ADR和orgmode工具使用</title>
      <link>https://it-boyer.github.io/post/adr%E5%92%8Corgmode%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 30 Jul 2019 12:12:32 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/adr%E5%92%8Corgmode%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>工具总结</description>
    </item>
    
    <item>
      <title>VIPER设计模式</title>
      <link>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/viper%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 25 Jul 2019 19:27:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/viper%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>类图 流程图</description>
    </item>
    
    <item>
      <title>二级布局器流程</title>
      <link>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E4%BA%8C%E7%BA%A7%E5%B8%83%E5%B1%80%E5%99%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 22 Jul 2019 19:35:47 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E4%BA%8C%E7%BA%A7%E5%B8%83%E5%B1%80%E5%99%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>类图 流程图</description>
    </item>
    
    <item>
      <title>用户组管理</title>
      <link>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 05 Jul 2019 08:26:09 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</guid>
      <description>扫码登录业务,登录功能新增跳转申请加入业务 .5 配置管理入口:在个人主页添加“用户组管理”(支持修改名入口名)和隐藏显示逻辑 .5 分享二维码:分享组</description>
    </item>
    
    <item>
      <title>定制开源的CLImageEditor图片编辑工具</title>
      <link>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E5%AE%9A%E5%88%B6%E5%BC%80%E6%BA%90%E7%9A%84climageeditor%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 13 Jun 2019 22:19:57 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E5%AE%9A%E5%88%B6%E5%BC%80%E6%BA%90%E7%9A%84climageeditor%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/</guid>
      <description>定制图片编辑器 关于Other Link Flag的有关说明 1 other link 添加-ObjC 替换为github代理 时序图</description>
    </item>
    
    <item>
      <title>电子巡查项目设计</title>
      <link>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 11 Jun 2019 07:03:20 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5/%E7%94%B5%E5%AD%90%E5%B7%A1%E6%9F%A5%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/</guid>
      <description>工期预估 整改 录入 用例 时序图 类图 活动图 工期预估 整改 二级布局器入口配置/电子巡查底部详情 1 复用旧版电子整改管理列表(新增过滤器)待定页 1 电子巡查</description>
    </item>
    
    <item>
      <title>storyboard的几种方式</title>
      <link>https://it-boyer.github.io/post/ios/ui/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 20 Jun 2018 14:49:37 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>通过IB（xib/storyboard）创建View的周期方法 loadView：加载View方法，UI是通过代码绘制时，初始化控制器的视图时</description>
    </item>
    
    <item>
      <title>&#43;0800格式转NSDate</title>
      <link>https://it-boyer.github.io/post/ios/&#43;0800%E6%A0%BC%E5%BC%8F%E8%BD%ACnsdate/</link>
      <pubDate>Wed, 30 May 2018 18:42:20 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/&#43;0800%E6%A0%BC%E5%BC%8F%E8%BD%ACnsdate/</guid>
      <description>1 2 3 4 NSString *timstr = [resData objectForKey:@&amp;#34;Data&amp;#34;]; timstr = [timstr stringByReplacingOccurrencesOfString:@&amp;#34;/Date(&amp;#34; withString:@&amp;#34;&amp;#34;]; timstr = [timstr stringByReplacingOccurrencesOfString:@&amp;#34;+0800)/&amp;#34; withString:@&amp;#34;&amp;#34;]; model.time = [NSDate dateWithTimeIntervalSince1970:timstr.longLongValue/1000];</description>
    </item>
    
    <item>
      <title>高德地图API使用</title>
      <link>https://it-boyer.github.io/post/ios/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 30 May 2018 14:40:56 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi%E4%BD%BF%E7%94%A8/</guid>
      <description>引入头文件 1 2 #import &amp;lt;AMapFoundationKit/AMapFoundationKit.h&amp;gt; #import &amp;lt;AMapLocationKit/AMapLocationKit.h&amp;gt; 调用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 NSString</description>
    </item>
    
    <item>
      <title>汉字拼音排序方法</title>
      <link>https://it-boyer.github.io/post/ios/%E6%B1%89%E5%AD%97%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 17 May 2018 10:46:57 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E6%B1%89%E5%AD%97%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</guid>
      <description>{% github it-boyer sortChinese 2deab8b width = 30% %} 方法一 实现模型对象排序，当万条数据时，出现卡顿问题。 方法二 实现字符串数组的排序，暂时没有验证大量排序情况，尝试优化第一种方</description>
    </item>
    
    <item>
      <title>隐藏导航条底部黑线</title>
      <link>https://it-boyer.github.io/post/ios/%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%9D%A1%E5%BA%95%E9%83%A8%E9%BB%91%E7%BA%BF/</link>
      <pubDate>Mon, 12 Mar 2018 13:51:07 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%9D%A1%E5%BA%95%E9%83%A8%E9%BB%91%E7%BA%BF/</guid>
      <description>当需要导航条为透明色，与背景色一体时，需要去除底边线： 如下代码：使用空图片设置背景图，并指定bar的样式。 1 2 self.navigationController.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault]; self.navigationController.navigationBar.barStyle = UIBarStyleBlackTranslucent;</description>
    </item>
    
    <item>
      <title>MVVM介绍</title>
      <link>https://it-boyer.github.io/post/ios/mvvm%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 24 Sep 2017 19:26:28 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/mvvm%E4%BB%8B%E7%BB%8D/</guid>
      <description>MVVM 所以，MVVM 到底是什么？与其专注于说明 MVVM 的来历，不如让我们看一个典型的 iOS 是如何构建的，并从那里了解 MVVM： 我们看到的是一个典型的 MVC 设置</description>
    </item>
    
    <item>
      <title>线程安全类的设计</title>
      <link>https://it-boyer.github.io/post/ios/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 24 Sep 2017 19:06:03 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>这篇文章将专注于实用技巧，设计模式，以及对于写出线程安全类和使用 GCD 来说所特别需要注意的一些反面模式。 线程安全 Apple 的框架 首先让我们来看看 Apple 的框架</description>
    </item>
    
    <item>
      <title>GCD底层并发API</title>
      <link>https://it-boyer.github.io/post/ios/gcd%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91api/</link>
      <pubDate>Sun, 24 Sep 2017 18:21:38 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/gcd%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91api/</guid>
      <description>这篇文章里，我们将会讨论一些 iOS 和 OS X 都可以使用的底层 API。除了 dispatch_once ，我们一般不鼓励使用其中的任何一种技术。 但是我们想要揭示出表面之下深层次的</description>
    </item>
    
    <item>
      <title>常见的后台实现</title>
      <link>https://it-boyer.github.io/post/ios/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 24 Sep 2017 11:03:35 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0/</guid>
      <description>概览 本文主要探讨一些常用后台任务的最佳实践： 如何做异步网络请求 如何异步处理大型文件，以保持较低的内存占用 操作队列 (Operation Queues) 还是 GCD ? 操作队列提供了在</description>
    </item>
    
    <item>
      <title>iOS多线程API介绍</title>
      <link>https://it-boyer.github.io/post/ios/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bapi%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 24 Sep 2017 09:18:49 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ios%E5%A4%9A%E7%BA%BF%E7%A8%8Bapi%E4%BB%8B%E7%BB%8D/</guid>
      <description>并发所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上分时（时间共享）的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。 OS</description>
    </item>
    
    <item>
      <title>iOS视图渲染</title>
      <link>https://it-boyer.github.io/post/ios/ui/ios%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Sat, 23 Sep 2017 14:51:07 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/ios%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93/</guid>
      <description>图形堆栈 当像素映射到屏幕上的时候，后台发生了很多事情。但一旦他们显示到屏幕上，每一个像素均由三个颜色组件构成：红，绿，蓝。三个独立的颜色单元</description>
    </item>
    
    <item>
      <title>NSURLSession的使用说明</title>
      <link>https://it-boyer.github.io/post/ios/nsurlsession%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 08 Sep 2017 18:48:43 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/nsurlsession%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>iOS 7 和 Mac OS X 10.9 Mavericks 中一个显著的变化就是对 Foundation URL 加载系统的彻底重构。 现在已经有人在深入苹果的网络层基础架构的地方做研究了，所以我想是时候来分享一些</description>
    </item>
    
    <item>
      <title>WKWebView控件和JS脚本传参及交互</title>
      <link>https://it-boyer.github.io/post/ios/ui/wkwebview%E6%8E%A7%E4%BB%B6%E5%92%8Cjs%E8%84%9A%E6%9C%AC%E4%BC%A0%E5%8F%82%E5%8F%8A%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Fri, 07 Jul 2017 09:54:41 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/wkwebview%E6%8E%A7%E4%BB%B6%E5%92%8Cjs%E8%84%9A%E6%9C%AC%E4%BC%A0%E5%8F%82%E5%8F%8A%E4%BA%A4%E4%BA%92/</guid>
      <description>WebKit简介 {% github it-boyer WKWebView-JS d03bc0e width = 30% %} 自iOS8 以后，苹果推出了新框架 WebKit，提供了替换 UIWebView 的组件 WKWebView。各种 UIWebView 的性能问题没有了</description>
    </item>
    
    <item>
      <title>PBBReader阅读器解析</title>
      <link>https://it-boyer.github.io/post/ios/pbbreader%E9%98%85%E8%AF%BB%E5%99%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 26 Jun 2017 17:02:18 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/pbbreader%E9%98%85%E8%AF%BB%E5%99%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>支持OS X浏览PDF简单视图 运行scheme： PDFReaderForOSX 即可 支持iOS pageViewController: pdf翻页效果视图控制器 startingViewController:Dat</description>
    </item>
    
    <item>
      <title>CoreML机器学习初级教程</title>
      <link>https://it-boyer.github.io/post/ios/coreml%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sat, 24 Jun 2017 22:10:44 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/coreml%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</guid>
      <description>资源 Core ML开发文档 ML模型资源页面 在Working with Models中包含有几个常用的模型模板，例如用于在图片中检测物体——树、动物、人等等。 Integrating</description>
    </item>
    
    <item>
      <title>iOS11ARKit初探</title>
      <link>https://it-boyer.github.io/post/ios/ios11arkit%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Sat, 24 Jun 2017 19:46:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ios11arkit%E5%88%9D%E6%8E%A2/</guid>
      <description>iOS11新技术 ARKit教程 增强现实(AR)描述用户体验，将2D或3D元素从设备的摄像头中添加到实时视图中，从而使这些元素出现在真实世界中</description>
    </item>
    
    <item>
      <title>UIStackView教程了解StackView</title>
      <link>https://it-boyer.github.io/post/ios/ui/uistackview%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3stackview/</link>
      <pubDate>Fri, 24 Feb 2017 18:12:14 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/uistackview%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3stackview/</guid>
      <description>原地址 UIStackView简单介绍 一个Stack View能够将它所含的View以各种方式沿其轴向进行分布，同时也可以将View沿某个方向等</description>
    </item>
    
    <item>
      <title>更改设备屏幕上显示的应用程序图标下方的名称</title>
      <link>https://it-boyer.github.io/post/ios/ui/%E6%9B%B4%E6%94%B9%E8%AE%BE%E5%A4%87%E5%B1%8F%E5%B9%95%E4%B8%8A%E6%98%BE%E7%A4%BA%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E4%B8%8B%E6%96%B9%E7%9A%84%E5%90%8D%E7%A7%B0/</link>
      <pubDate>Fri, 24 Feb 2017 14:23:59 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/%E6%9B%B4%E6%94%B9%E8%AE%BE%E5%A4%87%E5%B1%8F%E5%B9%95%E4%B8%8A%E6%98%BE%E7%A4%BA%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87%E4%B8%8B%E6%96%B9%E7%9A%84%E5%90%8D%E7%A7%B0/</guid>
      <description>修改APP启动图标上的名称，需配置Info.plist文件，增加CFBundleDisplayName属性键值对。 进入到如下界面： 在Info</description>
    </item>
    
    <item>
      <title>自定义展示型控制器</title>
      <link>https://it-boyer.github.io/post/ios/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%95%E7%A4%BA%E5%9E%8B%E6%8E%A7%E5%88%B6%E5%99%A8/</link>
      <pubDate>Fri, 17 Feb 2017 12:26:11 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%95%E7%A4%BA%E5%9E%8B%E6%8E%A7%E5%88%B6%E5%99%A8/</guid>
      <description>{% github it-boyer PresentationsDemo 2cce4c908 width = 30% %} 触发转场的方式 官方支持的自定义转场 在 UINavigationController 中 push 和 pop; 在 UITabBarController 中切换 Tab; Modal 转场：presentation 和 dismissal，俗称视图控</description>
    </item>
    
    <item>
      <title>整理iOS中几种常用的展示型视图控制器</title>
      <link>https://it-boyer.github.io/post/ios/ios%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B1%95%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 16 Feb 2017 17:53:18 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ios%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B1%95%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BD%BF%E7%94%A8/</guid>
      <description>开始项目 完整项目 UIAlertController 在iOS8中，提供UIAlertController控制器代替UIAlertView和UIActionSheet两个控件。</description>
    </item>
    
    <item>
      <title>在OC和swift中区分多个targets</title>
      <link>https://it-boyer.github.io/post/ios/%E5%9C%A8oc%E5%92%8Cswift%E4%B8%AD%E5%8C%BA%E5%88%86%E5%A4%9A%E4%B8%AAtargets/</link>
      <pubDate>Wed, 11 Jan 2017 13:49:33 +0000</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E5%9C%A8oc%E5%92%8Cswift%E4%B8%AD%E5%8C%BA%E5%88%86%E5%A4%9A%E4%B8%AAtargets/</guid>
      <description>build setting预编译位置 Preprocessor Macros Other Swift Flags 为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在</description>
    </item>
    
    <item>
      <title>UIImage的渲染模式</title>
      <link>https://it-boyer.github.io/post/ios/ui/uiimage%E7%9A%84%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 26 Nov 2015 16:15:11 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/uiimage%E7%9A%84%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/</guid>
      <description>设置UIImage的渲染模式：UIImage.renderingMode 在 iOS 7 中 UIImage 添加了一个 renderingMode 属性。我们可以使用 imageWithRende</description>
    </item>
    
    <item>
      <title>在IOS中自定义URLSchemes教程</title>
      <link>https://it-boyer.github.io/post/ios/%E5%9C%A8ios%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89urlschemes%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 28 Aug 2014 20:32:48 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E5%9C%A8ios%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89urlschemes%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h4 id=&#34;url-schemes&#34;&gt;URL Schemes&lt;/h4&gt;
&lt;p&gt;iPhone SDK中最酷的功能之一是一个应用程序能够把自己和自定义的URL协议绑定，这个URL协议可用于启动该应用程序（通过浏览器或者iPhone上的另一个程序）。创建这样的绑定并不难，难得的是你忍不住要在你的程序里用它！&lt;/p&gt;
&lt;p&gt;首先，你需要说明你想如何在程序中响应这个URL。最简单的自定义协议的方法是“唤醒”，而且可以通过URL把数据信息传递给程序，这样，程序被唤醒后能做更多的事情。&lt;/p&gt;
&lt;h4 id=&#34;注册自定义url协议&#34;&gt;注册自定义URL协议&lt;/h4&gt;
&lt;p&gt;首先需要向iPhone注册一个自定义URL协议。这是在你的项目文件夹的info.plist文件进行的（就是你改变应用程序图标的同一个文件）。&lt;/p&gt;
&lt;p&gt;默认，Xcode在图形窗口中打开info.pllist，当然也可以直接用文本模式打开——对有的人来说这反而更简单。&lt;/p&gt;
&lt;h6 id=&#34;step1-右键选择add-row在下拉选框中选择url-types类型为array&#34;&gt;Step1. 右键，选择“Add Row”,在下拉选框中选择“&lt;strong&gt;URL types&lt;/strong&gt;”，类型为Array:&lt;/h6&gt;
&lt;h6 id=&#34;step2-打开item-0类型为dic添加新key为url-identifier类型为string可以是任何值但建议用反域名例如-commyapp&#34;&gt;Step2. 打开“Item 0″类型为Dic,添加新key为&amp;quot;URL identifier&amp;quot;,类型为String。可以是任何值，但建议用“反域名”(例如 “com.myapp”)。&lt;/h6&gt;
&lt;h5 id=&#34;step3-打开item-0类型为dic添加新key为url-schemes类型为array&#34;&gt;Step3. 打开“Item 0″类型为Dic,添加新key为“URL Schemes”,类型为Array:&lt;/h5&gt;</description>
    </item>
    
    <item>
      <title>TextKit之便笺实战</title>
      <link>https://it-boyer.github.io/post/ios/ui/textkit%E4%B9%8B%E4%BE%BF%E7%AC%BA%E5%AE%9E%E6%88%98/</link>
      <pubDate>Thu, 03 Jul 2014 17:29:00 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/textkit%E4%B9%8B%E4%BE%BF%E7%AC%BA%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;h2 id=&#34;便笺练习功能点&#34;&gt;便笺练习功能点:&lt;/h2&gt;
&lt;p&gt;通过实现以下特效，练习并掌握布局管理器（layout manger），文本容器（text containers）和文本存储器（text storage）等用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态样式（Dynamic type）&lt;/li&gt;
&lt;li&gt;凸版印刷效果（Letterpress effects）&lt;/li&gt;
&lt;li&gt;环绕路径（Exclusion paths）&lt;/li&gt;
&lt;li&gt;动态文本格式及存储（Dynamic text formatting and storage）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个应用中我们将实现回流文本，字体大小的动态变换，以及闪回文本等效果。
效果图:&lt;br&gt;
&lt;img src=&#34;https://it-boyer.github.io/images/bianqian.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;
App开始运行后自动生成一组便笺实例并利用&lt;code&gt;tableViewController&lt;/code&gt;显示出来。&lt;code&gt;Storyboards&lt;/code&gt;和&lt;code&gt;segues&lt;/code&gt;会将被选中的单元格所对应的便笺内容显示出来以供用户编辑。
项目开发包：&lt;a href=&#34;http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/TextKitNotepad-starter.zip&#34;&gt;Notepad.zip&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;动态样式&#34;&gt;动态样式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;动态样式（Dynamic type）&lt;/code&gt;是iOS 7里面变化最大的特性之一; 它使得app可以遵从用户选择的字体大小和粗细。
选择 &lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt; 或 &lt;strong&gt;通用-&amp;gt;辅助功能&lt;/strong&gt; 来查看app中的字体设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-boyer.github.io/images/UserTextPreferences.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;
iOS 7 支持通过&lt;code&gt;粗体&lt;/code&gt;、&lt;code&gt;设置字体大小&lt;/code&gt;等方式提高支持动态文本的应用的易读性。
例如**&lt;code&gt;UIFont&lt;/code&gt;**新增的一个方法： **&lt;code&gt;preferredFontForTextStyle&lt;/code&gt;** 用来根据用户对字体大小的设置来自动制定字体样式。&lt;br&gt;
下面表格中是六种可用字体样式的示例：&lt;br&gt;
&lt;img src=&#34;https://it-boyer.github.io/images/TextStyles.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;
最左边一列是最小字体；中间一列是最大字体；最右边一列是粗体效果。&lt;/p&gt;
&lt;h3 id=&#34;使用系统动态字体样式&#34;&gt;使用系统动态字体样式&lt;/h3&gt;
&lt;p&gt;使用动态文本，是通过给&lt;code&gt;文本字体&lt;/code&gt;设置字体样式&lt;strong&gt;style&lt;/strong&gt;而不是指定具体的&lt;code&gt;字体名称&lt;/code&gt;和&lt;code&gt;大小&lt;/code&gt;。这样，系统会在运行时自动根据这一样式以及用户的字体大小设置来选择使用合适的字体。&lt;/p&gt;
&lt;h4 id=&#34;preferredfontfortextstyle方法设置字体样式&#34;&gt;&lt;code&gt;preferredFontForTextStyle:&lt;/code&gt;方法设置字体样式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;NoteEditorViewController.m/swift&lt;/code&gt; 在&lt;code&gt;viewDidLoad：&lt;/code&gt;方法实现的最后面加入以下代码：
{%codeblock lang:objc%}
self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
{%endcodeblock%}
{% codeblock  lang:swift %}
self.textView.font = UIFont.preferredFont(forTextStyle: .body)
{% endcodeblock %}&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;NotesListViewController.m/swift&lt;/code&gt; 在 &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; 方法中增加如下代码:
{%codeblock lang:objc%}
cell.textLabel.font = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline];
{%endcodeblock%}
{% codeblock  lang:swift %}
cell.textLabel?.font = UIFont.preferredFont(forTextStyle: .headline)
{% endcodeblock %}
上面两行代码都用到了新版iOS的字体样式.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;字体样式：通过语义法命名字体，例如 &lt;code&gt;UIFontTextStyleSubHeadline&lt;/code&gt;, 可以避免在代码里每一处都指定具体的字体名称和样式， 而且确保app能对用户的字体大小设置做出恰当的回应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;app响应用户字体设置&#34;&gt;APP响应用户字体设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;设置系统字体
返回到&lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt;重新修改字体设置.
再运行App, &lt;strong&gt;Note&lt;/strong&gt;页面的文字大小是当前设定的字体大小；前后截屏对比,分辨率小了一半。&lt;br&gt;
&lt;img src=&#34;https://it-boyer.github.io/images/NotepadWithDynamicType.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;设置系统字体生效
当我们返回到&lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt;重新修改字体设置. 再打开&lt;strong&gt;Note&lt;/strong&gt;页面, 会发现app并没有&lt;strong&gt;立即&lt;/strong&gt;对字体设置的变化做出相应反应。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;监听系统通知实现app响应用户字体设置&#34;&gt;监听系统通知：实现APP响应用户字体设置&lt;/h5&gt;
&lt;p&gt;当用户修改了他们的字体大小设置之后，这一样式对应的字体并不会自动更新，必须重新请求才能获取新的值。用户设置变化后，&lt;code&gt;preferredFontForTextStyle:&lt;/code&gt;方法返回的字体也会变化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加监听系统通知&lt;code&gt;UIContentSizeCategoryDidChangeNotification&lt;/code&gt;通知APP响应用户字体设置的变化
打开 &lt;code&gt;NoteEditorViewController.m&lt;/code&gt; 并在 &lt;code&gt;viewDidLoad&lt;/code&gt; 方法的实现的最后加入以下代码：
{%codeblock lang:objc%}
[[NSNotificationCenter defaultCenter]
addObserver:self
selector:@selector(preferredContentSizeChanged:)
name:UIContentSizeCategoryDidChangeNotification
object:nil];
{%endcodeblock%}
{%codeblock lang:swift%}
//字体变化通知:调用preferredContentSizeChanged:方法
NotificationCenter.default.addObserver(self, selector: #selector(NoteEditorViewController.preferredContentSizeChanged(_:)), name: NSNotification.Name.UIContentSizeCategoryDidChange, object: nil)
{%endcodeblock%}&lt;/li&gt;
&lt;li&gt;添加系统通知响应事件
收到用于指定本类接收字体设定变化的通知后，调用&lt;code&gt;preferredContentSizeChanged:&lt;/code&gt;方法
在&lt;code&gt;NoteEditorViewController.m&lt;/code&gt;中&lt;code&gt;viewDidLoad&lt;/code&gt;方法之后紧接着添加以下方法：
{%codeblock lang:objc%}&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;(void)preferredContentSizeChanged:(NSNotification *)notification
{
self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
}
{%endcodeblock%}
{%codeblock lang:swift %}
//字体变化通知时调用
func preferredContentSizeChanged(_ notification:NSNotification)
{
self.textView.font = UIFont.preferredFont(forTextStyle: .body)
}
{%endcodeblock%}
这一方法作用是根据新的字体设置来设定&lt;code&gt;textView&lt;/code&gt;中的字体。 &lt;br&gt;
Build并运行app，修改字体大小设置，Note页面就可以即时更新字体大小了。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iOS Document Interaction 编程指南</title>
      <link>https://it-boyer.github.io/post/ios/iosdocumentinteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 01 Jul 2014 23:12:01 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/iosdocumentinteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h4 id=&#34;关于-document-interaction&#34;&gt;关于 Document Interaction&lt;/h4&gt;
&lt;p&gt;iOS支持在你的app中通过调用其他app来预览和显示文档。iOS还支持文件关联，允许其他app调用你的app打开文件。这些技术包括了UIKit中提供的&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/Reference/Reference.html&#34;&gt;UIDocumentInteractionController&lt;/a&gt;类，以及&lt;a href=&#34;https://developer.apple.com/library/ios/documentation/QuickLook/Reference/QuickLookFrameworkReference_iPhoneOS/_index.html&#34;&gt;Quick Look&lt;/a&gt;框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;######预览文档和呈现选项菜单&lt;br&gt;
如果app需要打开自身并不支持的文件时，就需要使用&lt;strong&gt;UIDocumentInteractionController&lt;/strong&gt;。一个&lt;strong&gt;document interaction controller&lt;/strong&gt;通过&lt;strong&gt;Quick Look框架&lt;/strong&gt;判断文档是否能被另一个app打开和预览。也就是说，app可以通过&lt;strong&gt;documentinteraction controller&lt;/strong&gt;提供一些支持打开该文件方式的菜单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现需要以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要通过其他APP打开的文件，来实例化&lt;code&gt;UIDocumentInteractionController&lt;/code&gt;实例对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在自己的APP UI中提供一个代表这种文件的图像标（一般显示文件名或者图标）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;用户交互，如触摸这个控件，则调用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种交互界面:
1. 预览文件的内容。
2. 一个包含预览和打开操作的菜单。可以通过实现某些委托方法，向菜单中加入其他操作，比如复制、打印。
3. 一个菜单，仅包含“以其它方式打开”操作。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;documentinteractioncontroller&lt;/code&gt;内置了一些手势，必要时可以直接实现它们。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;######使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;的场景:&lt;strong&gt;与文件交互的app都可以使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要从网络下载文件的APP:&lt;br&gt;
例如，email程序需要打开和预览邮件附件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;不下载文件的APP:&lt;br&gt;
例如，APP需要支持文件共享（参考“File-Sharing Support” in &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007898&#34;&gt;iOS Technology Overview&lt;/a&gt;), 即可以对同步到app Documents/Shared目录下的文件使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>UIDevice类介绍</title>
      <link>https://it-boyer.github.io/post/ios/uidevice%E7%B1%BB%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 17 Jun 2014 15:12:53 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/uidevice%E7%B1%BB%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h3 id=&#34;uideviceh&#34;&gt;UIDevice.h&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIDevice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;currentDevice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 		  &lt;span class=&#34;c1&#34;&gt;// 获取当前设备
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;               	  &lt;span class=&#34;c1&#34;&gt;// e.g. &amp;#34;My iPhone&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              	  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;iPhone&amp;#34;, @&amp;#34;iPod touch&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localizedModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     	  &lt;span class=&#34;c1&#34;&gt;// localized version of model  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;systemName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     		  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;iOS&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;systemVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   	  &lt;span class=&#34;c1&#34;&gt;// e.g. @&amp;#34;4.0&amp;#34;  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UIDeviceOrientation&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orientation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSUUID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifierForVendor&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;//可用于唯一标识该设备，同一供应商不同应用具有相同的UUID
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// 竖向，头向上
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  		&lt;span class=&#34;c1&#34;&gt;// 竖向，头向下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;         		&lt;span class=&#34;c1&#34;&gt;// 横向，头向左
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;       		&lt;span class=&#34;c1&#34;&gt;// 横向，头向右
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationFaceUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                  	&lt;span class=&#34;c1&#34;&gt;// 平放，屏幕朝下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;UIDeviceOrientationFaceDown&lt;/span&gt;                	 &lt;span class=&#34;c1&#34;&gt;// 平放，屏幕朝下
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;//使用内置的宏定义的函数，根据&lt;strong&gt;orientation&lt;/strong&gt;判断设备方向,返回值类型&lt;strong&gt;BOOL&lt;/strong&gt;.&lt;br&gt;
{%codeblock lang:java 纵向宏定义,返回YES:纵向%}
#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)
{%endcodeblock %}
{%codeblock lang:java 横向宏定义,返回YES:横向%}
#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)
{%endcodeblock%}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IOS7新宠TextKit</title>
      <link>https://it-boyer.github.io/post/ios/ui/ios7%E6%96%B0%E5%AE%A0textkit/</link>
      <pubDate>Mon, 16 Jun 2014 22:24:48 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ui/ios7%E6%96%B0%E5%AE%A0textkit/</guid>
      <description>&lt;h2 id=&#34;text-kit&#34;&gt;Text Kit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Text Kit&lt;/code&gt;&lt;/strong&gt;：是个庞大的framework，继承了&lt;code&gt;Core Text&lt;/code&gt;的全部功能，构建了快速、先进的文本排版和渲染引擎，更让开发者们高兴的是，设计者把它封装在了一个面向对象的API中。并且与UIKit框架很好的集成，它让程序能够通过&lt;strong&gt;NSTextStorage&lt;/strong&gt;对象存储文本排版和显示文本等主要信息，并支持排版所需要的所有特性，包括字距调整、连写、换行和对齐等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;更直观的理解，&lt;strong&gt;UITextView&lt;/strong&gt;，&lt;strong&gt;UITextField&lt;/strong&gt;、&lt;strong&gt;UILabel&lt;/strong&gt;等UIKit控件都已经基于&lt;strong&gt;Text Kit&lt;/strong&gt;重新构建，是为UIKit框架提供高质量排版服务而扩展的一些类和协议.&lt;br&gt;
例如：NSTextStorage对象，它本身是&lt;strong&gt;NSMutableAttributedString&lt;/strong&gt;的子类，支持分批编辑，这就意味着在改变一个范围内的字符样式时，不用整体替换文本内容，就能完成排版效果。其中支持分页文本、文本包装、富文本编辑、交互式文本着色、文本折叠和自定义截取等特性。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IOS6之前，想实现一些丰富的文本排版，例如在textView中显示不同样式的文本，或者图片和文字混排等，就需要借助于UIWebView或者深入研究一下&lt;code&gt;Core Text&lt;/code&gt;。后来iOS6，增加一个很棒的属性:&lt;code&gt;NSAttributedString&lt;/code&gt;，主要用于支持UILabel、UITextField、UITextView等UIKit控件自主排版的功能。很显然，IOS7并没有满足于这一改进，同时推出一款功能更为齐全，易用的&lt;code&gt;Text Kit&lt;/code&gt;新宠。&lt;br&gt;
在iOS 6中, 用于文本的UIKit控件是基于WebKit和Core Graphics的字符串绘制方法来实现的。如下面层级体系图所示：&lt;br&gt;
iOS 7的整体构架要更清晰，所有基于文本的UIKit控件（除了UIWebView）现在都可以使用Text Kit，如下图所示：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IOS7的变革</title>
      <link>https://it-boyer.github.io/post/ios/ios7%E7%9A%84%E5%8F%98%E9%9D%A9/</link>
      <pubDate>Wed, 11 Jun 2014 10:17:19 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ios7%E7%9A%84%E5%8F%98%E9%9D%A9/</guid>
      <description>性能提高以及被遗弃的功能 新增截屏通知:UIApplicationUserDidTakeScreenshotNotification 在IOS 7</description>
    </item>
    
    <item>
      <title>在IOS中像SnapChat一样监控screenshots</title>
      <link>https://it-boyer.github.io/post/ios/%E5%9C%A8ios%E4%B8%AD%E5%83%8Fsnapchat%E4%B8%80%E6%A0%B7%E7%9B%91%E6%8E%A7screenshots/</link>
      <pubDate>Tue, 10 Jun 2014 18:45:37 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/%E5%9C%A8ios%E4%B8%AD%E5%83%8Fsnapchat%E4%B8%80%E6%A0%B7%E7%9B%91%E6%8E%A7screenshots/</guid>
      <description>A number of Stack Overflowquestions were having issues with this, so I figured I’d explain. From reverse engineering, this is the exact method used by SnapChat, but it’s also pretty much what I’d have done myself. The process is pretty simple, and relies on a quirk of iOS: taking a screenshot cancels all touches on the screen. Because of that, anything that you</description>
    </item>
    
    <item>
      <title>IOS7截屏问题</title>
      <link>https://it-boyer.github.io/post/ios/ios7%E6%88%AA%E5%B1%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 10 Jun 2014 18:29:31 +0800</pubDate>
      
      <guid>https://it-boyer.github.io/post/ios/ios7%E6%88%AA%E5%B1%8F%E9%97%AE%E9%A2%98/</guid>
      <description>iOS 7截图最新变化: 不再影响用户其他操作 在 iOS 7 中，截图动作已经发生了变化，就如苹果在版本说明中描述的那样：用户截图时，有效点击不会再失效了。这</description>
    </item>
    
  </channel>
</rss>
